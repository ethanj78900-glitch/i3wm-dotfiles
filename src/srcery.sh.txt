#!/usr/bin/env bash
set -euo pipefail

# Srcery palette (16-color)
# Source: srcery color scheme (https://github.com/srcery-colors)
BG="#1C1B19"
FG="#FCE8C3"
CURSOR="#FBB829"

C0="#1C1B19"  # black
C1="#EF2F27"  # red
C2="#519F50"  # green
C3="#FBB829"  # yellow
C4="#2C78BF"  # blue
C5="#E02C6D"  # magenta
C6="#0AAEB3"  # cyan
C7="#BAA67F"  # white
C8="#918175"  # bright black
C9="#F75341"  # bright red
C10="#98BC37" # bright green
C11="#FED06E" # bright yellow
C12="#68A8E4" # bright blue
C13="#FF5C8F" # bright magenta
C14="#2BE4D0" # bright cyan
C15="#FCE8C3" # bright white

usage() {
  cat <<EOF
apply-srcery.sh — Apply the Srcery terminal color scheme to common Linux terminals.

USAGE:
  ./apply-srcery.sh [targets...]

Targets:
  alacritty  kitty  wezterm  xresources  foot  gnome-terminal  all

Default: all (applies to every supported target it can find safely).

Notes:
- Existing configs are backed up with a .bak-<timestamp> suffix.
- GNOME Terminal requires gsettings/dconf and is applied to a new profile named "Srcery".
EOF
}

backup_file() {
  local f="$1"
  [[ -f "$f" ]] || return 0
  local ts
  ts=$(date +%Y%m%d-%H%M%S)
  cp -p -- "$f" "${f}.bak-${ts}"
}

write_alacritty() {
  local dir="$HOME/.config/alacritty"
  mkdir -p "$dir"
  local file="$dir/colors-srcery.yml"
  backup_file "$file" || true
  cat >"$file" <<YAML
# Auto-generated by apply-srcery.sh
colors:
  primary:
    background: '${BG}'
    foreground: '${FG}'
  cursor:
    text:       '${BG}'
    cursor:     '${CURSOR}'
  normal:
    black:   '${C0}'
    red:     '${C1}'
    green:   '${C2}'
    yellow:  '${C3}'
    blue:    '${C4}'
    magenta: '${C5}'
    cyan:    '${C6}'
    white:   '${C7}'
  bright:
    black:   '${C8}'
    red:     '${C9}'
    green:   '${C10}'
    yellow:  '${C11}'
    blue:    '${C12}'
    magenta: '${C13}'
    cyan:    '${C14}'
    white:   '${C15}'
YAML

  # Try to add an import/include if a main config exists
  for main in "$dir/alacritty.yml" "$dir/alacritty.toml" "$dir/alacritty.yaml"; do
    if [[ -f "$main" ]]; then
      backup_file "$main"
      if [[ ${main##*.} == "toml" ]]; then
        if ! grep -q '\bimport\b' "$main" 2>/dev/null; then
          printf '\nimport = ["%s"]\n' "$file" >> "$main"
        else
          # naive append if not already present
          grep -q "$file" "$main" || printf '\nimport = ["%s"]\n' "$file" >> "$main"
        fi
      else
        if ! grep -q '^import:' "$main" 2>/dev/null; then
          printf '\nimport:\n  - %s\n' "$file" >> "$main"
        else
          grep -q "$file" "$main" || printf '  - %s\n' "$file" >> "$main"
        fi
      fi
    fi
  done
  echo "✔ Alacritty theme written to $file (remember to import it in your config)."
}

write_kitty() {
  local dir="$HOME/.config/kitty"
  mkdir -p "$dir"
  local file="$dir/srcery.conf"
  backup_file "$file" || true
  cat >"$file" <<KITTY
# Auto-generated by apply-srcery.sh
background ${BG}
foreground ${FG}
cursor ${CURSOR}
selection_background ${C8}
selection_foreground ${FG}

color0  ${C0}
color1  ${C1}
color2  ${C2}
color3  ${C3}
color4  ${C4}
color5  ${C5}
color6  ${C6}
color7  ${C7}
color8  ${C8}
color9  ${C9}
color10 ${C10}
color11 ${C11}
color12 ${C12}
color13 ${C13}
color14 ${C14}
color15 ${C15}
KITTY

  # Ensure include
  local kitty_conf="$dir/kitty.conf"
  if [[ -f "$kitty_conf" ]] && ! grep -q "include .*srcery.conf" "$kitty_conf"; then
    backup_file "$kitty_conf"
    printf '\ninclude %s\n' "$file" >> "$kitty_conf"
  fi
  echo "✔ Kitty theme written to $file (add 'include srcery.conf' to kitty.conf)."
}

write_wezterm() {
  local dir="$HOME/.config/wezterm/colors"
  mkdir -p "$dir"
  local file="$dir/srcery.toml"
  backup_file "$file" || true
  cat >"$file" <<TOML
# Auto-generated by apply-srcery.sh
[colors]
background = "${BG}"
foreground = "${FG}"
cursor_bg = "${CURSOR}"
cursor_fg = "${BG}"

ansi = ["${C0}","${C1}","${C2}","${C3}","${C4}","${C5}","${C6}","${C7}"]
brights = ["${C8}","${C9}","${C10}","${C11}","${C12}","${C13}","${C14}","${C15}"]
TOML
  echo "✔ WezTerm theme written to $file (set color_scheme = 'srcery' or use config builder)."
}

write_xresources() {
  local dir="$HOME/.Xresources.d"
  mkdir -p "$dir"
  local file="$dir/srcery"
  backup_file "$file" || true
  cat >"$file" <<XRES
! Auto-generated by apply-srcery.sh
*.foreground: ${FG}
*.background: ${BG}
*.cursorColor: ${CURSOR}

*.color0:  ${C0}
*.color1:  ${C1}
*.color2:  ${C2}
*.color3:  ${C3}
*.color4:  ${C4}
*.color5:  ${C5}
*.color6:  ${C6}
*.color7:  ${C7}
*.color8:  ${C8}
*.color9:  ${C9}
*.color10: ${C10}
*.color11: ${C11}
*.color12: ${C12}
*.color13: ${C13}
*.color14: ${C14}
*.color15: ${C15}
XRES

  local xr="$HOME/.Xresources"
  if [[ -f "$xr" ]] && ! grep -q "#include \"$file\"" "$xr"; then
    backup_file "$xr"
    printf '\n#include \"%s\"\n' "$file" >> "$xr"
  fi
  echo "✔ Xresources written to $file (xrdb -merge ~/.Xresources to load)."
}

write_foot() {
  local dir="$HOME/.config/foot"
  mkdir -p "$dir"
  local file="$dir/foot.ini"
  # We'll merge or create a simple config
  if [[ -f "$file" ]]; then
    backup_file "$file"
    # Remove existing [colors] block (naive)
    awk 'BEGIN{skip=0} /^\[colors\]/{print; skip=1; print "palette=${C0}:${C1}:${C2}:${C3}:${C4}:${C5}:${C6}:${C7}:${C8}:${C9}:${C10}:${C11}:${C12}:${C13}:${C14}:${C15}"; print "background=${BG}"; print "foreground=${FG}"; print "cursor=${CURSOR}"; next} /^\[/{skip=0} !skip{print}' "$file" >"$file.tmp"
    mv "$file.tmp" "$file"
  else
    cat >"$file" <<FOOT
# Auto-generated by apply-srcery.sh
[colors]
palette=${C0}:${C1}:${C2}:${C3}:${C4}:${C5}:${C6}:${C7}:${C8}:${C9}:${C10}:${C11}:${C12}:${C13}:${C14}:${C15}
background=${BG}
foreground=${FG}
cursor=${CURSOR}
FOOT
  fi
  echo "✔ foot(1) theme applied in $file. Restart foot to see changes."
}

write_gnome_terminal() {
  if ! command -v gsettings >/dev/null 2>&1; then
    echo "✖ gsettings not found; skipping GNOME Terminal."
    return 0
  fi
  local schema="org.gnome.Terminal.ProfilesList"
  local existing
  existing=$(gsettings get ${schema} list | tr -d "[]',") || true
  local new_uuid
  new_uuid=$(uuidgen)
  local name="Srcery"

  # Create profile
  gsettings set ${schema} list "$(gsettings get ${schema} list | sed "s/]$/, '${new_uuid}']/")"
  gsettings set ${schema} default "${new_uuid}"
  local prof="org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:${new_uuid}/"

  gsettings set "$prof" visible-name "$name"
  gsettings set "$prof" use-theme-colors false

  local palette="['${C0}','${C1}','${C2}','${C3}','${C4}','${C5}','${C6}','${C7}','${C8}','${C9}','${C10}','${C11}','${C12}','${C13}','${C14}','${C15}']"
  gsettings set "$prof" palette "$palette"
  gsettings set "$prof" background-color "${BG}"
  gsettings set "$prof" foreground-color "${FG}"
  gsettings set "$prof" bold-color-same-as-fg true
  echo "✔ GNOME Terminal profile '$name' created (UUID $new_uuid). Switch to it in Preferences if not default."
}

main() {
  if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then
    usage; exit 0
  fi
  local targets=("${@:-all}")
  if [[ ${#targets[@]} -eq 0 ]]; then targets=(all); fi

  # Expand 'all'
  if [[ " ${targets[*]} " == *" all "* ]]; then
    targets=(alacritty kitty wezterm xresources foot gnome-terminal)
  fi

  for t in "${targets[@]}"; do
    case "$t" in
      alacritty)        write_alacritty ;;
      kitty)            write_kitty ;;
      wezterm)          write_wezterm ;;
      xresources)       write_xresources ;;
      foot)             write_foot ;;
      gnome-terminal)   write_gnome_terminal ;;
      *) echo "Unknown target: $t"; usage; exit 1 ;;
    esac
  done

  echo "\nDone. If your terminal reads configs at startup, restart it to apply Srcery."
}

main "$@"
